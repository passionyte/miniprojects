"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.get = void 0;
const inBrowser = typeof window !== "undefined" && typeof window.fetch !== "undefined";
const inNode = typeof process !== "undefined" &&
    process.versions != null &&
    process.versions.node != null;
async function get(url) {
    if (inBrowser) {
        const response = await window.fetch(url);
        return {
            status: response.status,
            data: await response.json(),
        };
    }
    else if (inNode) {
        const getter = url.startsWith("https")
            ? await Promise.resolve().then(() => __importStar(require("https")))
            : await Promise.resolve().then(() => __importStar(require("http")));
        return await new Promise((res, rej) => {
            const request = getter.get(url, (response) => {
                let data = "";
                response.on("error", rej);
                response.on("data", (chunk) => (data += chunk.toString()));
                response.on("end", () => res({
                    status: response.statusCode,
                    data: JSON.parse(data),
                }));
            });
            request.on("error", rej);
            request.end();
        });
    }
    else {
        throw new Error("Unknown environment");
    }
}
exports.get = get;
